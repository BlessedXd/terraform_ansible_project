#====================================================
# Author: –í–∞–ª–µ—Ä—ñ–π –ú–∞–Ω—É–π–ª–∏–∫
#====================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–æ—ó —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è AWS VPC
# –í–∫–ª—é—á–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è VPC, –¥–≤–æ—Ö –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂, 
# NAT —à–ª—é–∑—ñ–≤, –º–∞—Ä—à—Ä—É—Ç—ñ–≤, –≥—Ä—É–ø –±–µ–∑–ø–µ–∫–∏ —Ç–∞ EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ 
# –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Django –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
# GitHub: https://github.com/BlessedXd
#====================================================


# üåê –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö Availability Zones –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—ñ–¥–º–µ—Ä–µ–∂.
data "aws_availability_zones" "available" {}

# üêß –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—Ä–∞–∑—É AMI –¥–ª—è Ubuntu 20.04
data "aws_ami" "ubuntu" {
  most_recent = true  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–µ—Ä—Å—ñ—é –æ–±—Ä–∞–∑—É
  owners      = ["099720109477"]  # –í–ª–∞—Å–Ω–∏–∫ –æ–±—Ä–∞–∑—É

  filter {
    name   = "name"  # –§—ñ–ª—å—Ç—Ä –∑–∞ –Ω–∞–∑–≤–æ—é –æ–±—Ä–∞–∑—É
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }
}

# üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ —É –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂–∞—Ö.
# –Ü–Ω—Å—Ç–∞–Ω—Å–∏ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
resource "aws_instance" "app_instance" {
  count         = 2  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.
  ami           = data.aws_ami.ubuntu.id  # ID AMI, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—É.
  instance_type = var.instance_type  # –¢–∏–ø —ñ–Ω—Å—Ç–∞–Ω—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, t2.micro).
  subnet_id     = aws_subnet.public_subnets[count.index].id  # ID –ø—É–±–ª—ñ—á–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  vpc_security_group_ids = [aws_security_group.dev_sg.id]  # –ì—Ä—É–ø–∞ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è —ñ–Ω—Å—Ç–∞–Ω—Å—É.

  tags = {
    Name = "${var.env} - app-instance-${count.index + 1}"  # –¢–µ–≥ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —ñ–Ω—Å—Ç–∞–Ω—Å—É.
  }
}

resource "aws_instance" "db_instance" {
  ami           = data.aws_ami.ubuntu.id  # ID AMI –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
  instance_type = var.instance_type  # –¢–∏–ø —ñ–Ω—Å—Ç–∞–Ω—Å—É –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
  subnet_id     = aws_subnet.private_subnets[0].id  # ID –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ –¥–ª—è –ë–î.
  vpc_security_group_ids = [aws_security_group.dev_sg.id]  # –ì—Ä—É–ø–∞ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è —ñ–Ω—Å—Ç–∞–Ω—Å—É.

  tags = {
    Name = "${var.env} - db-instance"  # –¢–µ–≥ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —ñ–Ω—Å—Ç–∞–Ω—Å—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
  }
}

# üîß –ó–º—ñ–Ω–Ω–∞ –¥–ª—è —Ç–∏–ø—É EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—É.
variable "instance_type" {
  description = "–¢–∏–ø EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—É"  
  default     = "t2.micro"  # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
  type        = string  # –¢–∏–ø –∑–º—ñ–Ω–Ω–æ—ó.
}

# üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Virtual Private Cloud (VPC).
# –¶–µ –≥–æ–ª–æ–≤–Ω–∞ –º–µ—Ä–µ–∂–∞, –≤ –º–µ–∂–∞—Ö —è–∫–æ—ó –±—É–¥—É—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω—ñ –≤—Å—ñ —ñ–Ω—à—ñ —Ä–µ—Å—É—Ä—Å–∏.
resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr  # CIDR –±–ª–æ–∫ –¥–ª—è VPC.

  tags = {
    Name = "${var.env} - vpc"  # –¢–µ–≥ –¥–ª—è VPC.
  }
}

# üåç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Internet Gateway (IGW) –¥–ª—è VPC.
# –¶–µ –¥–æ–∑–≤–æ–ª—è—î EC2 —ñ–Ω—Å—Ç–∞–Ω—Å–∞–º —É –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂–∞—Ö –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—è –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id  # ID VPC, –¥–æ —è–∫–æ–≥–æ –±—É–¥–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ IGW.

  tags = {
    Name = "${var.env} - igw"  # –¢–µ–≥ –¥–ª—è IGW.
  }
}

# üè¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂ —É VPC.
# –ö–æ–∂–Ω–∞ –ø—ñ–¥–º–µ—Ä–µ–∂–∞ –æ—Ç—Ä–∏–º–∞—î –ø—É–±–ª—ñ—á–Ω—É IP-–∞–¥—Ä–µ—Å—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —ñ–Ω—Å—Ç–∞–Ω—Å—É.
resource "aws_subnet" "public_subnets" {
  count = length(var.public_subnet_cidrs)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.
  vpc_id = aws_vpc.main.id  # ID VPC, –¥–æ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  cidr_block = element(var.public_subnet_cidrs, count.index)  # CIDR –±–ª–æ–∫ –¥–ª—è –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  availability_zone = data.aws_availability_zones.available.names[count.index]  # Availability Zone –¥–ª—è –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  map_public_ip_on_launch = true  # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ—ó IP-–∞–¥—Ä–µ—Å–∏ —ñ–Ω—Å—Ç–∞–Ω—Å–∞–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É.

  tags = {
    Name = "${var.env} - public - ${count.index + 1}"  # –¢–µ–≥ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—É–±–ª—ñ—á–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  }
}

# üì° –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.
# –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤—Å—ñ–º —ñ–Ω—Å—Ç–∞–Ω—Å–∞–º —É –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂–∞—Ö –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É —á–µ—Ä–µ–∑ IGW.
resource "aws_route_table" "public_subnets" {
  vpc_id = aws_vpc.main.id  # ID VPC –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.

  route {
    cidr_block = "0.0.0.0/0"  # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å—å–æ–≥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ—ñ–∫—É.
    gateway_id = aws_internet_gateway.main.id  # ID IGW –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó.
  }

  tags = {
    Name = "${var.env} - route-public-subnets"  # –¢–µ–≥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
  }
}

# üîó –ê—Å–æ—Ü—ñ–∞—Ü—ñ—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂ –∑ –º–∞—Ä—à—Ä—É—Ç–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é.
resource "aws_route_table_association" "public_routes" {
  count = length(aws_subnet.public_subnets[*].id)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π –¥–ª—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.
  route_table_id = aws_route_table.public_subnets.id  # ID –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
  subnet_id = element(aws_subnet.public_subnets[*].id, count.index)  # ID –ø—É–±–ª—ñ—á–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
}

# üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Elastic IP –¥–ª—è NAT Gateways.
# –ö–æ–∂–Ω–∞ NAT —à–ª—é–∑ –æ—Ç—Ä–∏–º—É—î —Å–≤—ñ–π Elastic IP.
resource "aws_eip" "nat" {
  count = length(var.private_subnet_cidrs)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å NAT —à–ª—é–∑—ñ–≤.
  domain = "vpc"  # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è EIP –¥–ª—è VPC.

  tags = {
    Name = "${var.env} - nat-gw- ${count.index + 1}"  # –¢–µ–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ EIP.
  }
}

# üåê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è NAT Gateway –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
# NAT —à–ª—é–∑–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –≤–∏—Ö—ñ–¥ –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂–∞—Ö.
resource "aws_nat_gateway" "nat" {
  count = length(var.private_subnet_cidrs)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å NAT —à–ª—é–∑—ñ–≤.
  allocation_id = aws_eip.nat[count.index].id  # ID EIP –¥–ª—è NAT —à–ª—é–∑—É.
  subnet_id = element(aws_subnet.public_subnets[*].id, count.index)  # ID –ø—É–±–ª—ñ—á–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ, –¥–µ —Ä–æ–∑–º—ñ—â—É—î—Ç—å—Å—è NAT —à–ª—é–∑.

  tags = {
    Name = "${var.env} - nat-gw - ${count.index + 1}"  # –¢–µ–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ NAT —à–ª—é–∑—É.
  }
}

# üïµÔ∏è‚Äç‚ôÇÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂ —É VPC.
# –¶—ñ –ø—ñ–¥–º–µ—Ä–µ–∂—ñ –Ω–µ –º–∞—é—Ç—å –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
resource "aws_subnet" "private_subnets" {
  count = length(var.private_subnet_cidrs)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.
  vpc_id = aws_vpc.main.id  # ID VPC, –¥–æ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  cidr_block = element(var.private_subnet_cidrs, count.index)  # CIDR –±–ª–æ–∫ –¥–ª—è –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  availability_zone = data.aws_availability_zones.available.names[count.index]  # Availability Zone –¥–ª—è –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.

  tags = {
    Name = "${var.env} - private - ${count.index + 1}"  # –¢–µ–≥ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
  }
}

# üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.
# –¶–µ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º –ø—ñ–¥–º–µ—Ä–µ–∂–∞–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ NAT —à–ª—é–∑–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
resource "aws_route_table" "private_subnets" {
  count = length(var.private_subnet_cidrs)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å.
  vpc_id = aws_vpc.main.id  # ID VPC –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
  
  route {
    cidr_block = "0.0.0.0/0"  # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å—å–æ–≥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ—ñ–∫—É.
    nat_gateway_id = aws_nat_gateway.nat[count.index].id  # ID NAT —à–ª—é–∑—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó.
  }

  tags = {
    Name = "${var.env} - route-private-subnet- ${count.index + 1}"  # –¢–µ–≥ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
  }
}

# üîó –ê—Å–æ—Ü—ñ–∞—Ü—ñ—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂ –∑ –º–∞—Ä—à—Ä—É—Ç–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é.
resource "aws_route_table_association" "private_routes" {
  count = length(aws_subnet.private_subnets[*].id)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.
  route_table_id = aws_route_table.private_subnets[count.index].id  # ID –º–∞—Ä—à—Ä—É—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
  subnet_id = element(aws_subnet.private_subnets[*].id, count.index)  # ID –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó –ø—ñ–¥–º–µ—Ä–µ–∂—ñ.
}

# üîê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Security Group –¥–ª—è —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤.
# –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤.
resource "aws_security_group" "dev_sg" {
  vpc_id = aws_vpc.main.id  # ID VPC –¥–ª—è –≥—Ä—É–ø–∏ –±–µ–∑–ø–µ–∫–∏.

  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ä—Ç 80 (HTTP).
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # –î–æ—Å—Ç—É–ø –∑ –±—É–¥—å-—è–∫–æ—ó IP-–∞–¥—Ä–µ—Å–∏.
  }

  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ä—Ç 22 (SSH) –ª–∏—à–µ –∑ –≤–∞—à–æ—ó IP-–∞–¥—Ä–µ—Å–∏.
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
  #  cidr_blocks = [var.my_ip]  # –î–æ—Å—Ç—É–ø –ª–∏—à–µ –∑ –≤–∞—à–æ—ó IP-–∞–¥—Ä–µ—Å–∏.
  }

  # –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–∞ –≤—Å—ñ –ø–æ—Ä—Ç–∏.
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"  # –í—Å—ñ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏.
    cidr_blocks = ["0.0.0.0/0"]  # –î–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö IP-–∞–¥—Ä–µ—Å.
  }

  tags = {
    Name = "${var.env} - security-group"  # –¢–µ–≥ –¥–ª—è –≥—Ä—É–ø–∏ –±–µ–∑–ø–µ–∫–∏.
  }
}

# üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (Application Load Balancer).
resource "aws_lb" "app_lb" {
  name               = "${var.env}-app-lb"  # –ù–∞–∑–≤–∞ –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫–∞.
  internal           = false  # –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫.
  load_balancer_type = "application"  # –¢–∏–ø –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫–∞.
  security_groups    = [aws_security_group.dev_sg.id]  # –ì—Ä—É–ø–∞ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫–∞.
  subnets            = aws_subnet.public_subnets[*].id  # ID –ø—É–±–ª—ñ—á–Ω–∏—Ö –ø—ñ–¥–º–µ—Ä–µ–∂.

  enable_deletion_protection = false  # –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.

  tags = {
    Name = "${var.env} - app-lb"  # –¢–µ–≥ –¥–ª—è –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫–∞.
  }
}

# üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤.
resource "aws_lb_target_group" "app_tg" {
  name     = "${var.env}-app-tg"  # –ù–∞–∑–≤–∞ —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏.
  port     = 80  # –ü–æ—Ä—Ç, –Ω–∞ —è–∫–æ–º—É –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏.
  protocol = "HTTP"  # –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏.
  vpc_id   = aws_vpc.main.id  # ID VPC –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏.

  health_check {
    path                = "/"  # –®–ª—è—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è.
    interval            = 30  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
    timeout             = 5  # –¢–∞–π–º-–∞—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
    healthy_threshold   = 2  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É.
    unhealthy_threshold = 2  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–≤–¥–∞–ª–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É.
  }

  tags = {
    Name = "${var.env} - app-tg"  # –¢–µ–≥ –¥–ª—è —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏.
  }
}

# üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏.
resource "aws_lb_listener" "app_listener" {
  load_balancer_arn = aws_lb.app_lb.arn  # ARN –±–∞–ª–∞–Ω—Å—É–≤–∞–ª—å–Ω–∏–∫–∞.
  port              = 80  # –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.
  protocol          = "HTTP"  # –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è.

  default_action {
    type = "forward"  # –î—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.
    target_group_arn = aws_lb_target_group.app_tg.arn  # ARN —Ü—ñ–ª—å–æ–≤–æ—ó –≥—Ä—É–ø–∏.
  }
}